name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
env:
  EVENT_NUMBER: ${{ github.event.number }}
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  MIN_TESTCOV: 80
  # A unique number for each workflow run within a repository.
  # This number does not change if you re-run the workflow run.
  RUN_ID: ${{ github.run_id }}
  # A unique number for each run of a particular workflow in a repository.
  # This number begins at 1 for the workflow's first run, and increments with each new run.
  # This number does not change if you re-run the workflow run.
  RUN_NUMBER: ${{ github.run_number }}
  # A unique number for each attempt of a particular workflow run in a repository.
  # This number begins at 1 for the workflow run's first attempt, and increments with each re-run.
  RUN_ATTEMPT: ${{ github.run_attempt }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.noop.outputs.should_skip }}
      paths_result: ${{ steps.noop.outputs.paths_result }}
    steps:
      - name: Detect No-op Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg", "**/Documentation/**"]'
          do_not_skip: '["push","schedule","release"]'
          concurrent_skipping: false
          paths_filter: |
            go:
              paths:
                - '**/*.go'
            version:
              paths:
                - '.VERSION'

      - name: vars
        run: |
          echo "EVENT_NUMBER: ${{env.EVENT_NUMBER}}"
          echo "COMMIT_SHA: ${{env.COMMIT_SHA}}"
          echo "PULL_NUMBER: ${{env.PULL_NUMBER}}"
          echo "RUN_ID: ${{env.RUN_ID}}"
          echo "RUN_NUMBER: ${{env.RUN_NUMBER}}"
          echo "RUN_ATTEMPT: ${{env.RUN_ATTEMPT}}"

  UnitTest:
    runs-on: ubuntu-latest
    needs:
      - detect-noop

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Prepare
        run: make vars tools folders generate  version change_log

      - name: UnitTest
        run: make build covtest

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker kubeca meta
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
        id: meta_kubeca
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            effectivesecurity/kubeca
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Docker kubeca docker_build_kubecertinit
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
        id: docker_build_kubeca
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile.kubeca
          context: .
          push: true
          tags: ${{ steps.meta_kubeca.outputs.tags }}
          labels: ${{ steps.meta_kubeca.outputs.labels }}

      - name: Docker kubecertinit meta
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'dependabot[bot]'
        id: meta_kubecertinit
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            effectivesecurity/kubecertinit
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Docker kubecertinit build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: docker_build_kubecertinit
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile.kubecertinit
          context: .
          push: true
          tags: ${{ steps.meta_kubecertinit.outputs.tags }}
          labels: ${{ steps.meta_kubecertinit.outputs.labels }}

      - name: coveralls
        # if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && needs.detect-noop.outputs.should_skip != 'true'
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make coveralls-github

      - name: Detect Version Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: version-changed
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths: '[".VERSION"]'
          skip_after_successful_duplicate: false
          paths_filter: |
            version:
              paths:
                - '.VERSION'
              backtracking: 2

      - name: set-tag
        run: |
          VERSION=$(cat .VERSION).$(git rev-list --count HEAD)
          echo "VERSION: ${VERSION}"
          echo "DIST_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "git tag ${VERSION}"

      - name: Create Tag
        # If 'skip-duplicate-actions' terminates before the paths checks are performed (for example, when a successful duplicate run has
        # been found) 'paths_result' outputs an empty object ('{}'). This can be easily intercepted in the if condition of a job
        # by checking the result of the "global" 'should_skip' output first.
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.version-changed.outputs.should_skip != 'true' && !fromJSON(steps.version-changed.outputs.paths_result).version.should_skip
        uses: actions/github-script@v7
        with:
          script: |
            const {DIST_VERSION} = process.env          
            github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${DIST_VERSION}`,
                sha: context.sha
            })
